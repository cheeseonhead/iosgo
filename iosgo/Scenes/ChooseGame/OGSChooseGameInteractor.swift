//
//  OGSChooseGameInteractor.swift
//  iosgo
//
//  Created by Jeffrey Wu on 2017-02-26.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol OGSChooseGameInteractorInput
{
    func listGames(request: OGSChooseGame.ListGames.Request)
    func touchGame(request: OGSChooseGame.TouchGame.Request)
}

protocol OGSChooseGameInteractorOutput
{
    func presentListGames(response: OGSChooseGame.ListGames.Response)
    func presentTouchGame(response: OGSChooseGame.TouchGame.Response)
}

class OGSChooseGameInteractor: OGSChooseGameInteractorInput
{
    var output: OGSChooseGameInteractorOutput!
    var listGamesWorker = OGSChooseGameListGamesWorker(store: OGSSeekGraphSocketStore())
    var challengeWorker = ChallengeWorker(challengeStore: ChallengeStore(apiStore: OGSApiStore(sessionController: OGSSessionController.sharedInstance)))
    var sessionWorker = OGSSessionWorker(sessionController: OGSSessionController.sharedInstance)

    var selectedChallenge: OGSChallenge?

    required init()
    {
        listGamesWorker.delegate = self
    }

    func listGames(request _: OGSChooseGame.ListGames.Request)
    {
        listGamesWorker.connect()
    }

    func touchGame(request: OGSChooseGame.TouchGame.Request)
    {
        switch request.action {
        case .accept:
            acceptChallenge(at: request.indexPath)
        default:
            break
        }
    }
}

// MARK: - Touch Game
extension OGSChooseGameInteractor
{
    func acceptChallenge(at indexPath: IndexPath)
    {
        guard let challenge = listGamesWorker.challenge(at: indexPath) else
        {
            let response = OGSChooseGame.TouchGame.Response(action: .accept, success: false)
            output.presentTouchGame(response: response)
            return
        }

        var response = OGSChooseGame.TouchGame.Response(action: .accept, success: false)

        challengeWorker.acceptChallenge(id: challenge.id)
        { storeResponse in
            if storeResponse.success
            {
                selectedChallenge = challenge
            }

            response.success = storeResponse.success

            output.presentTouchGame(response: response)
        }
    }
}

// MARK: - List Game Worker Delegate
extension OGSChooseGameInteractor: OGSChooseGameListGamesWorkerDelegate
{
    func sendGameList(_ gameList: [OGSChallenge])
    {
        let session = sessionWorker.current
        let response = OGSChooseGame.ListGames.Response(loggedIn: session.tokensExists, username: session.user?.username ?? "",
                                                        userRank: session.user?.rank ?? 0, challenges: gameList)

        output.presentListGames(response: response)
    }
}

// MARK: DIP Conformance
extension OGSSeekGraphSocketStore: OGSListGamesStoreProtocol {}
