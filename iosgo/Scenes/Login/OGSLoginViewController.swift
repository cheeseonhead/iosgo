//
//  OGSLoginViewController.swift
//  iosgo
//
//  Created by Jeffrey Wu on 2017-02-15.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol OGSLoginViewControllerInput
{
    func displayLogin(viewModel: OGSLogin.Login.ViewModel)
}

protocol OGSLoginViewControllerOutput
{
    func login(request: OGSLogin.Login.Request)
}

protocol OGSLoginViewControllerRouter {}

class OGSLoginViewController: UIViewController, OGSLoginViewControllerInput
{
    // MARK: - Views
    @IBOutlet weak var usernameTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var errorLabel: UILabel!
    @IBOutlet weak var loginButton: OGSButton!
    {
        didSet
        {
            loginButton.setupAsButtonType(.primary)
        }
    }

    var output: OGSLoginViewControllerOutput!
    var router: OGSLoginViewControllerRouter!
}

// MARK: - Lifecycle
extension OGSLoginViewController
{
    override func awakeFromNib()
    {
        super.awakeFromNib()
        OGSLoginConfigurator.sharedInstance.configure(viewController: self)
    }
}

// MARK: - IBActions
extension OGSLoginViewController
{
    @IBAction func loginButtonTapped(_ sender: Any)
    {
        guard let username = usernameTextField.text,
              let password = passwordTextField.text
                else {return}

        let request = OGSLogin.Login.Request(username: username, password: password)

        output.login(request: request)
    }
}

// MARK: - Display Login
extension OGSLoginViewController
{
    func displayLogin(viewModel: OGSLogin.Login.ViewModel)
    {
        if viewModel.readyToNavigate {

        }

        setupInputsFor(state: viewModel.userInputState)
        setupErrorLabel(for: viewModel.errorLabelState)
    }

    func setupInputsFor(state: OGSLogin.Login.ViewModel.UserInputState)
    {
        let isInputReady = state == .ready

        usernameTextField.isEnabled = isInputReady
        passwordTextField.isEnabled = isInputReady
        loginButton.isPending = !isInputReady
    }

    func setupErrorLabel(for state: OGSLogin.Login.ViewModel.ErrorLabelState)
    {
        switch(state) {
            case .hidden:
                errorLabel.isHidden = true
                break
        case .showing(let message):
            errorLabel.isHidden = false
            errorLabel.text = message
            break
        }
    }
}
