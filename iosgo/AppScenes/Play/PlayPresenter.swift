//
//  PlayPresenter.swift
//  iosgo
//
//  Created by Cheese Onhead on 6/25/17.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import PromiseKit
import UIKit

protocol PlayPresentationLogic {
    func presentLoadScene(response: Promise<Play.LoadGame.Response>)
    func presentUpdateGame(response: Play.UpdateGame.Response)
    func presentUpdateClock(response: Play.UpdateClock.Response)
}

class PlayPresenter: PlayPresentationLogic {
    weak var viewController: PlayDisplayLogic?

    private var renderer = GameRenderer()

    func presentLoadScene(response: Promise<Play.LoadGame.Response>) {
        response.done(on: DispatchQueue.main) { response in
            let state = self.renderer.getState(from: response.state)

            let playerInfoUsers = self.playerInfoUsers(from: response)

            let model = Play.LoadGame.ViewModel(state: state, black: playerInfoUsers.black, white: playerInfoUsers.white)
            self.viewController?.displayLoadScene(viewModel: model)
        }.catch { error in
            self.viewController?.errorAlert(error)
        }
    }

    func presentUpdateGame(response: Play.UpdateGame.Response) {
        let state = renderer.getState(from: response.state)

        let model = Play.UpdateGame.ViewModel(state: state)
        viewController?.displayUpdateGame(viewModel: model)
    }

    func presentUpdateClock(response: Play.UpdateClock.Response) {
        let viewModel = clockVM(response)

        viewController?.displayUpdateClock(viewModel: viewModel)
    }
}

private extension PlayPresenter {
    func clockVM(_ response: Play.UpdateClock.Response) -> Play.UpdateClock.ViewModel {
        let converter = ClockConverter(type: response.clockType)
        let formatter = ClockFormatter(type: response.clockType)
        let strings = formatter.string(from: converter.actualClock(from: response.clock))

        let vm = Play.UpdateClock.ViewModel(blackTimeStr: strings.black, whiteTimeStr: strings.white)
        return vm
    }

    func playerInfoUsers(from response: Play.LoadGame.Response) -> (black: PlayerInfoView.ViewModel, white: PlayerInfoView.ViewModel) {
        let black = PlayerInfoView.ViewModel(profile: response.icons.black, username: response.game.players.black.username)
        let white = PlayerInfoView.ViewModel(profile: response.icons.white, username: response.game.players.white.username)

        return (black, white)
    }
}
