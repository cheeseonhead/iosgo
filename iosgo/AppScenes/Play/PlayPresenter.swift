//
//  PlayPresenter.swift
//  iosgo
//
//  Created by Cheese Onhead on 6/25/17.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PlayPresentationLogic {
    func presentLoadScene(response: Play.LoadGame.Response)
    func presentUpdateGame(response: Play.UpdateGame.Response)
    func presentUpdateClock(response: Play.UpdateClock.Response)
}

class PlayPresenter: PlayPresentationLogic {
    weak var viewController: PlayDisplayLogic?

    private var renderer = GameRenderer()

    func presentLoadScene(response: Play.LoadGame.Response) {

        _ = response.promise.done { goState in
            let state = self.renderer.getState(from: goState)
            let model = Play.LoadGame.ViewModel(state: state)
            self.viewController?.displayLoadScene(viewModel: model)
        }
    }

    func presentUpdateGame(response: Play.UpdateGame.Response) {
        let state = renderer.getState(from: response.state)

        let model = Play.UpdateGame.ViewModel(state: state)
        viewController?.displayUpdateGame(viewModel: model)
    }

    func presentUpdateClock(response: Play.UpdateClock.Response) {
        let viewModel = clockVM(response)

        viewController?.displayUpdateClock(viewModel: viewModel)
    }
}

private extension PlayPresenter {
    func clockVM(_ response: Play.UpdateClock.Response) -> Play.UpdateClock.ViewModel {
        let vm = Play.UpdateClock.ViewModel(blackTimeStr: "\(String(describing: response.blackClock))", whiteTimeStr: "\(String(describing: response.whiteClock))")
        return vm
    }
}
