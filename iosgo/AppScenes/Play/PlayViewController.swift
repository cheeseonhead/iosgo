//
//  PlayViewController.swift
//  iosgo
//
//  Created by Cheese Onhead on 6/25/17.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import RxCocoa
import RxSwift
import SpriteKit
import UIKit

protocol PlayDisplayLogic: class, Alerting {
    func displayLoadScene(viewModel: Play.LoadGame.ViewModel)
    func displayUpdateGame(viewModel: Play.UpdateGame.ViewModel)
    func displayUpdateClock(viewModel: Play.UpdateClock.ViewModel)
}

class PlayViewController: UIViewController {
    var interactor: PlayBusinessLogic?
    var router: (NSObjectProtocol & PlayRoutingLogic & PlayDataPassing)?

    @IBOutlet var boardView: SKView!
    @IBOutlet var gameInfoView: GameInfoView!

    var boardScene: BoardScene!

    private let infoSequence = BehaviorRelay(value: GameInfoView.ViewModel.default).skip(1)
    private let timeSequence = BehaviorRelay(value: Play.UpdateClock.ViewModel(blackTimeStr: "None", whiteTimeStr: "None")).skip(1)
    private let gameInfoSequence: Observable<GameInfoView.ViewModel>

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        gameInfoSequence = BehaviorRelay.combineLatest(infoSequence, timeSequence, resultSelector: { a, _ -> GameInfoView.ViewModel in
            let one = PlayerInfoView.ViewModel(profile: a.one.profile, username: a.one.username)
            let two = PlayerInfoView.ViewModel(profile: a.two.profile, username: a.two.username)
            return GameInfoView.ViewModel(one: one, two: two)
        })

        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        gameInfoSequence = BehaviorRelay.combineLatest(infoSequence, timeSequence, resultSelector: { a, _ -> GameInfoView.ViewModel in
            let one = PlayerInfoView.ViewModel(profile: a.one.profile, username: a.one.username)
            let two = PlayerInfoView.ViewModel(profile: a.two.profile, username: a.two.username)
            return GameInfoView.ViewModel(one: one, two: two)
        })
        super.init(coder: aDecoder)
        setup()
    }

    override func viewDidLoad() {
        // Load the SKScene from 'GameScene.sks'
        if let scene = SKScene(fileNamed: "BoardScene") as? BoardScene {
            boardScene = scene

            // Set the scale mode to scale to fit the window
            boardScene.scaleMode = .aspectFit
            boardScene.actionDelegate = self

            // Present the scene
            boardView.presentScene(boardScene)
        }

        boardView.ignoresSiblingOrder = true

        boardView.showsFPS = true
        boardView.showsNodeCount = true
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

        let controller = UIAlertController(title: "Game ID", message: "", preferredStyle: .alert)
        controller.addTextField { textfield in
            textfield.placeholder = "ID"
        }
        let action = UIAlertAction(title: "OK", style: .default) { _ in
            guard let passwordField = controller.textFields?.first else {
                return
            }
            let id = Int(passwordField.text ?? "0")!
            self.interactor?.loadScene(request: Play.LoadGame.Request(id: id))
        }
        controller.addAction(action)
        present(controller, animated: true, completion: nil)
    }

    public override var traitCollection: UITraitCollection {
        if view.frame.size.width < view.frame.size.height {
            return UITraitCollection(traitsFrom: [UITraitCollection(horizontalSizeClass: .compact), UITraitCollection(verticalSizeClass: .regular)])
        }
        return super.traitCollection
    }
}

// MARK: - BoardScene Action Delegate

extension PlayViewController: BoardSceneActionDelegate {
    func submitMove(_ point: GridPoint) {
        let request = Play.SubmitMove.Request(move: point)

        interactor?.submitMove(request: request)
    }
}

// MARK: - Display

extension PlayViewController: PlayDisplayLogic {
    func displayLoadScene(viewModel: Play.LoadGame.ViewModel) {
        boardScene.initialize(viewModel.state)

        let gameInfoVM = GameInfoView.ViewModel(one: viewModel.black, two: viewModel.white)

        gameInfoView.infoSequence.accept(gameInfoVM)
        //        gameInfoView.setUsers(black: viewModel.black, white: viewModel.white)
    }

    func displayUpdateGame(viewModel: Play.UpdateGame.ViewModel) {
        boardScene.render(viewModel.state)
    }

    func displayUpdateClock(viewModel _: Play.UpdateClock.ViewModel) {
        //        gameInfoView.setClocks(blackTime: viewModel.blackTimeStr, whiteTime: viewModel.whiteTimeStr)
    }
}

// MARK: Setup

private extension PlayViewController {
    func setup() {
        let viewController = self
        let interactor = PlayInteractor()
        let presenter = PlayPresenter()
        let router = PlayRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}
