//
//  OGSLoginPresenter.swift
//  iosgo
//
//  Created by Jeffrey Wu on 2017-02-15.
//  Copyright (c) 2017 Cheeseonhead. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import PromiseKit

protocol OGSLoginPresenterInput {
    func presentLogin(response: Promise<OGSLogin.Login.Response>)
    func presentFieldsChange(response: OGSLogin.FieldsChanged.Response)
}

protocol OGSLoginPresenterOutput: class {
    func displayLogin(viewModel: OGSLogin.Login.ViewModel)
    func displayFieldsChange(viewModel: OGSLogin.FieldsChanged.ViewModel)
}

class OGSLoginPresenter: OGSLoginPresenterInput {
    weak var output: OGSLoginPresenterOutput!

    func presentLogin(response: Promise<OGSLogin.Login.Response>) {

        _ = firstly { () -> Promise<OGSLogin.Login.Response> in
            let viewModel = OGSLogin.Login.ViewModel(readyToNavigate: false, userInputState: .pending, errorLabelState: .hidden)
            OGSDispatcher.asyncMain {
                self.output.displayLogin(viewModel: viewModel)
            }

            return response
        }.done { _ in
            let viewModel = OGSLogin.Login.ViewModel(readyToNavigate: true, userInputState: .ready, errorLabelState: .hidden)
            OGSDispatcher.asyncMain {
                self.output.displayLogin(viewModel: viewModel)
            }
        }.catch { error in
            var errorLabelState: OGSLogin.Login.ViewModel.ErrorLabelState!

            switch error {
            case ApiError.unauthorized:
                errorLabelState = .showing(message: "Invalid username or password")
            default:
                errorLabelState = .showing(message: error.localizedDescription)
            }

            let viewModel = OGSLogin.Login.ViewModel(readyToNavigate: false, userInputState: .ready, errorLabelState: errorLabelState)
            OGSDispatcher.asyncMain {
                self.output.displayLogin(viewModel: viewModel)
            }
        }
    }

    func presentFieldsChange(response: OGSLogin.FieldsChanged.Response) {
        var viewModel = OGSLogin.FieldsChanged.ViewModel(buttonEnabled: true)

        for text in response.textFieldTexts {
            if text.count == 0 {
                viewModel.buttonEnabled = false
            }
        }

        OGSDispatcher.asyncMain {
            self.output.displayFieldsChange(viewModel: viewModel)
        }
    }
}
